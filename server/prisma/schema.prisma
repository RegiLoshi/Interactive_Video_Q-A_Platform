// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  name      String
  last_name String  
  email     String      @unique
  hashed_password   String
  date_of_birth   DateTime
  liked_categories     Categories[]   @relation("UserLikedCategories")
  role Role   @default(USER)
  authored_questions Question[]       @relation("AuthoredQuestions")
  authored_answers Answer[]           @relation("AuthoredAnswers")
  bookmarked_questions Question[]     @relation("bookmarkedQuestionByUsers")
  bookmarked_answers Answer[]         @relation("bookmarkedAnswerByUsers")
  liked_questions Question[]          @relation("likedQuestionByUsers")
  liked_answers Answer[]              @relation("likedAnswerByUsers")
  subscribed_questions Question[]     @relation("subsribedQuestions")
  refresh_tokens Refresh_Token[]
  password_token Password_Reset_Token[] 
}

model Question{
  id        String      @id @default(uuid())
  author    User @relation(name: "AuthoredQuestions", fields: [author_id], references: [id])
  author_id String      
  title String
  description String?
  category Categories @relation(fields: [category_id], references: [id])
  category_id String
  created_at DateTime @default(now())
  shareable_link String
  answers Answer[] @relation("Answers")
  bookedmarked_users User[] @relation("bookmarkedQuestionByUsers")
  liked_users User[] @relation("likedQuestionByUsers")
  subscribedUsers User[] @relation("subsribedQuestions")
}

model Answer{
  id        String      @id @default(uuid())
  author    User @relation(name: "AuthoredAnswers",fields: [author_id], references: [id])
  author_id String   
  question  Question @relation(name: "Answers",fields: [question_id], references: [id])
  question_id String   
  response_type Response_type
  text_answer String?
  video_url String?
  created_at DateTime @default(now())
  bookedmarked_users User[] @relation("bookmarkedAnswerByUsers")
  liked_users User[] @relation("likedAnswerByUsers")
}

model Categories {
  id        String  @id @default(uuid())
  name      String
  users     User[]  @relation("UserLikedCategories")
  questions Question[] 
}

model Refresh_Token{
  id    String   @id @default(uuid())
  user User @relation(fields: [user_id], references: [id])
  user_id String
  hashed_token   String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  revoked   Boolean  @default(false) 
}

model Password_Reset_Token{
  id    String   @id @default(uuid())
  user User @relation(fields: [user_id], references: [id])
  user_id String @unique
  hashed_token   String
  createdAt DateTime @default(now())
}

enum Role{
  USER 
  ADMIN
}

enum Response_type{
  VIDEO
  TEXT
}

enum Like_type{
  LIKE
  DISLIKE
}