// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id              String      @id @default(uuid())
//   name            String
//   last_name       String  
//   email           String      @unique
//   hashed_password String
//   date_of_birth   DateTime
//   liked_categories CategoryEnum[]  @relation("UserLikedCategories")
//   role            Role        @default(USER)
//   authored_questions Question[]    @relation("AuthoredQuestions")
//   authored_answers Answer[]        @relation("AuthoredAnswers")
//   bookmarked_questions Question[]  @relation("bookmarkedQuestionByUsers")
//   bookmarked_answers Answer[]      @relation("bookmarkedAnswerByUsers")
//   liked_questions Question[]       @relation("likedQuestionByUsers")
//   liked_answers Answer[]           @relation("likedAnswerByUsers")
//   subscribed_questions Question[]  @relation("subsribedQuestions")
//   refresh_tokens Refresh_Token[]
//   password_token Password_Reset_Token[] 
// }

// model Question {
//   id              String      @id @default(uuid())
//   author          User        @relation(name: "AuthoredQuestions", fields: [author_id], references: [id])
//   author_id       String      
//   title           String
//   description     String?
//   isVideo         Boolean
//   category        CategoryEnum @relation(fields: [category_id], references: [id])
//   category_id     String
//   created_at      DateTime    @default(now())
//   shareable_link  String
//   answers         Answer[]    @relation("Answers")
//   bookedmarked_users User[]   @relation("bookmarkedQuestionByUsers")
//   liked_users     User[]      @relation("likedQuestionByUsers")
//   subscribedUsers User[]      @relation("subsribedQuestions")
// }

// model Survey{
//   id
//   Title
//   Description
//   Questions Question[]
//   author_id
// }

// model SurveyVideos{
//   idSurvey
//   idUseritQeUPergjig
//   url
// }
// model Answer {
//   id              String      @id @default(uuid())
//           User        @relation(name: "AuthoredAnswers", fields: [author_id], references: [id])
//   author_id       String   
//   question        Question    @relation(name: "Answers", fields: [question_id], references: [id])
//   question_id     String   
//   response_type   Response_type
//   text_answer     String?
//   video_url       String?
//   created_at      DateTime    @default(now())
//   bookedmarked_users User[]   @relation("bookmarkedAnswerByUsers")
//   liked_users     User[]      @relation("likedAnswerByUsers")
// }

// model CategoryEnum {
//   id              String      @id @default(uuid())
//   name            CategoryType
//   users           User[]      @relation("UserLikedCategories")
//   questions       Question[] 
// }

// model Refresh_Token {
//   id              String      @id @default(uuid())
//   user            User        @relation(fields: [user_id], references: [id])
//   user_id         String
//   hashed_token    String
//   expiresAt       DateTime
//   createdAt       DateTime    @default(now())
//   updatedAt       DateTime    @updatedAt 
//   revoked         Boolean     @default(false) 
// }

// model Password_Reset_Token {
//   id              String      @id @default(uuid())
//   user            User        @relation(fields: [user_id], references: [id])
//   user_id         String      @unique
//   hashed_token    String
//   createdAt       DateTime    @default(now())
// }

// enum Role {
//   USER 
//   ADMIN
//   GUEST
// }

// enum Response_type {
//   VIDEO
//   TEXT
// }

// enum Like_type {
//   LIKE
//   DISLIKE
// }


enum Role {
  ASKER
  RESPONDER
  ADMIN
}

model User {
  user_id    Int           @id
  name       String
  last_name  String
  email      String
  password   String
  role       Role
  created_at DateTime

  surveys       Survey[]      @relation("UserSurveys")
  questions     Question[]    @relation("UserQuestions")
  answers       Answer[]
  surveyVideos  Survey_Video[]
}

model Survey {
  survey_id   Int       @id
  title       String
  description String
  created_at  DateTime
  authorId    Int

  author      User      @relation("UserSurveys", fields: [authorId], references: [user_id])
  questions   Question[]
  surveyVideos Survey_Video[]
}

model Question {
  question_id Int       @id
  title       String
  category    Category
  surveyId    Int
  authorId    Int

  survey      Survey  @relation(fields: [surveyId], references: [survey_id])
  author      User    @relation("UserQuestions", fields: [authorId], references: [user_id])
  answers     Answer[]
}

model Answer {
  answer_Id   Int      @id
  text        String
  created_at  DateTime
  authorId    Int
  surveyId    Int
  questionId  Int

  author      User     @relation(fields: [authorId], references: [user_id])
  question    Question @relation(fields: [questionId], references: [question_id])
}

model Survey_Video {
  servey_video_id Int    @id
  question_link   String
  surveyId        Int
  uploaderId      Int

  survey   Survey @relation(fields: [surveyId], references: [survey_id])
  uploader User   @relation(fields: [uploaderId], references: [user_id])
}

enum Category {
  TECHNOLOGY
  PROGRAMMING
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  DATA_SCIENCE
  ARTIFICIAL_INTELLIGENCE
  MACHINE_LEARNING
  CYBERSECURITY
  CLOUD_COMPUTING
  MEDICINE
}